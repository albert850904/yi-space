{"version":3,"sources":["components/CountryTableRow.js","components/SearchBar.js","components/UI/Spinner.js","components/UI/Modal.js","components/CountryTable.js","lib/agents.js","container/CountryTable.js","App.js","index.js"],"names":["CountryTableRow","props","flag","name","alpha2Code","alpha3Code","nativeName","altSpellings","callingCodes","onPressCountry","onClick","className","src","alt","SearchBar","handleSearch","getAll","useState","errorMsg","setErrorMsg","inputRef","useRef","onSubmit","e","preventDefault","value","current","trim","type","placeholder","onFocus","ref","LoadingIndicator","show","classNames","require","animationTiming","enter","exit","modal","closed","info","in","timeout","mountOnEnter","unmountOnExit","enterActive","exitActive","capital","region","subregion","population","latlng","currencies","languages","CountryTable","isWaiting","setIsWaiting","countryInfoList","filterCountryHandler","getCountryInfoHandler","isModalOpen","setIsModalOpen","selectedCountry","setSelectedCountry","tablePage","setTablePage","sortDirection","setSortDireciton","splitCountryList","setSplitCountryList","modalOpenHandler","chosenCountry","temp","find","country","useEffect","timer","setTimeout","clearTimeout","Array","isArray","sort","a","b","localeCompare","text","onMouseDown","prevState","icon","faChevronUp","faChevronDown","map","index","Object","keys","item","Number","axios","defaults","baseURL","headers","common","Accept","Country","body","get","params","setCountryInfoList","splitArrayHandler","data","tempArray","i","j","length","arr","slice","push","result","status","sortedData","console","log","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7b254b01.chunk.js","sourcesContent":["import \"./CountryTableRow.sass\";\nfunction CountryTableRow(props) {\n  const {\n    flag,\n    name,\n    alpha2Code,\n    alpha3Code,\n    nativeName,\n    altSpellings,\n    callingCodes,\n    onPressCountry,\n  } = props;\n\n  return (\n    <tr onClick={() => onPressCountry(name)}>\n      <td className=\"image-container\">\n        <img src={flag} alt={name} />\n      </td>\n      <td>{name}</td>\n      <td>{alpha2Code}</td>\n      <td>{alpha3Code}</td>\n      <td>{nativeName}</td>\n      <td>{altSpellings}</td>\n      <td>{callingCodes}</td>\n    </tr>\n  );\n}\n\nexport default CountryTableRow;\n","import { useEffect, useRef, useState } from \"react\";\nimport \"./SearchBar.sass\";\n\nfunction SearchBar(props) {\n  const { handleSearch, getAll } = props;\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const inputRef = useRef();\n\n  const _handleSearch = (e) => {\n    e.preventDefault();\n    const value = inputRef.current.value;\n    if (typeof value === \"string\" && value.trim() === \"\") {\n      getAll();\n      return;\n    }\n    handleSearch(value);\n  };\n\n  return (\n    <div className=\"searchbar-style\">\n      <form onSubmit={_handleSearch}>\n        <input\n          type=\"text\"\n          name=\"country\"\n          placeholder=\"Countries...\"\n          onFocus={() => setErrorMsg(\"\")}\n          ref={inputRef}\n        />\n        <button type=\"submit\">搜尋</button>\n        {!!errorMsg && <div className=\"error-txt\">{errorMsg}</div>}\n      </form>\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React from \"react\";\nimport \"./Spinner.css\";\n\nconst LoadingIndicator = (props) => {\n  if (!props.show) return <></>;\n  return (\n    <div className=\"backdrop\">\n      <div className=\"lds-ring\">\n        <div />\n        <div />\n        <div />\n        <div />\n      </div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React from \"react\";\nimport Transition from \"react-transition-group/Transition\";\nimport CssTransition from \"react-transition-group/CSSTransition\";\nimport \"./Modal.css\";\nconst classNames = require(\"classnames\");\n\nconst animationTiming = {\n  enter: 400,\n  exit: 1000,\n};\n\nconst modal = (props) => {\n  const { show, closed, info } = props;\n\n  return (\n    <div className={classNames(show ? \"backdrop\" : \"backdrop-hide\")}>\n      <CssTransition\n        in={show}\n        timeout={animationTiming}\n        mountOnEnter\n        unmountOnExit\n        classNames={{\n          enter: \"\",\n          enterActive: \"modalOpen\",\n          exit: \"\",\n          exitActive: \"modalClose\",\n        }}\n      >\n        <div className=\"Modal\">\n          <img src={info.flag} alt={info.name} />\n          <h1>{info.name}</h1>\n          <div>\n            <div>\n              <b>2位國家代碼</b>: {info.alpha2Code}\n            </div>\n            <div>\n              <b>3位國家代碼</b>: {info.alpha3Code}\n            </div>\n          </div>\n          <div>\n            <div>\n              <b>首都</b>: {info.capital}\n            </div>\n            <div>\n              <b>區域</b>: {info.region}\n            </div>\n          </div>\n          <div>\n            <div>\n              <b>子區域</b>: {info.subregion}\n            </div>\n            <div>\n              <b>人口數</b>: {info.population}\n            </div>\n          </div>\n          <div>\n            <div>\n              <b>經緯度</b>: {info.latlng}\n            </div>\n            <div>\n              <b>人種</b>: {info.nativeName}\n            </div>\n          </div>\n          <div>\n            <div>\n              <b>貨幣</b>:{\" \"}\n              {info && info.currencies[0] ? info.currencies[0].name : \"\"}\n            </div>\n            <div>\n              <b>語言</b>:{\" \"}\n              {info && info.languages[0] ? info.languages[0].name : \"\"}\n            </div>\n          </div>\n          <button className=\"Button\" onClick={closed}>\n            關閉\n          </button>\n        </div>\n      </CssTransition>\n    </div>\n  );\n};\n\nexport default modal;\n","import { useEffect, useState } from \"react\";\nimport CountryTableRow from \"./CountryTableRow\";\nimport SearchBar from \"./SearchBar\";\nimport \"./CountryTable.sass\";\nimport Spinner from \"./UI/Spinner\";\nimport Modal from \"./UI/Modal\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronDown, faChevronUp } from \"@fortawesome/free-solid-svg-icons\";\nconst classNames = require(\"classnames\");\n\nconst ASCENT = 1;\nconst DECENT = 0;\n\nfunction CountryTable(props) {\n  const {\n    isWaiting,\n    setIsWaiting,\n    countryInfoList,\n    filterCountryHandler,\n    getCountryInfoHandler,\n  } = props;\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedCountry, setSelectedCountry] = useState(false);\n  const [tablePage, setTablePage] = useState(0);\n  const [sortDirection, setSortDireciton] = useState(DECENT);\n  const [splitCountryList, setSplitCountryList] = useState(null);\n\n  const sortCountryHandler = () => {\n    setIsWaiting(true);\n    splitCountryList.sort((a, b) => {\n      if (sortDirection === DECENT) return a.name.localeCompare(b.name, \"en\");\n      return b.name.localeCompare(a.name, \"en\");\n    });\n    setSplitCountryList(splitCountryList);\n  };\n\n  const handleFilter = (text) => {\n    setTablePage(0);\n    filterCountryHandler(text);\n  };\n\n  const modalOpenHandler = (name) => {\n    let chosenCountry;\n    for (const section of countryInfoList) {\n      const temp = section.find((country) => country.name === name);\n      if (temp) chosenCountry = temp;\n    }\n    setSelectedCountry(chosenCountry);\n    setIsModalOpen(true);\n  };\n\n  useEffect(() => {\n    if (!isWaiting) return;\n    const timer = setTimeout(() => {\n      setIsWaiting(false);\n    }, 1000);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [isWaiting]);\n\n  useEffect(() => {\n    if (!Array.isArray(countryInfoList)) return;\n    setIsWaiting(true);\n    setSplitCountryList(countryInfoList[tablePage]);\n  }, [countryInfoList, tablePage]);\n\n  useEffect(() => {\n    if (!Array.isArray(splitCountryList)) return;\n    sortCountryHandler();\n  }, [sortDirection, splitCountryList]);\n\n  return (\n    <>\n      <SearchBar handleSearch={handleFilter} getAll={getCountryInfoHandler} />\n      <table className=\"table-style\">\n        <thead>\n          <tr>\n            <th>國旗</th>\n            <th\n              onMouseDown={() =>\n                setSortDireciton((prevState) =>\n                  prevState === DECENT ? ASCENT : DECENT\n                )\n              }\n              className=\"clickable\"\n            >\n              國家名稱\n              {sortDirection === ASCENT ? (\n                <FontAwesomeIcon icon={faChevronUp} />\n              ) : (\n                <FontAwesomeIcon icon={faChevronDown} />\n              )}\n            </th>\n            <th>2位國家代碼</th>\n            <th>3位國家代碼</th>\n            <th>母語名稱</th>\n            <th>替代國家名稱</th>\n            <th>國際電話區號</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Array.isArray(splitCountryList) &&\n            splitCountryList.map((country, index) => {\n              return (\n                <CountryTableRow\n                  key={`${country.flag}-${index}`}\n                  flag={country.flag}\n                  name={country.name}\n                  alpha2Code={country.alpha2Code}\n                  alpha3Code={country.alpha3Code}\n                  nativeName={country.nativeName}\n                  altSpellings={country.altSpellings}\n                  callingCodes={country.callingCodes}\n                  onPressCountry={modalOpenHandler}\n                />\n              );\n            })}\n        </tbody>\n      </table>\n      <ul className=\"pages\">\n        {Array.isArray(countryInfoList) &&\n          Object.keys(countryInfoList)?.map((item) => {\n            return (\n              <li\n                onClick={() => setTablePage(Number(item))}\n                className={classNames(tablePage === Number(item) && \"selected\")}\n              >\n                {Number(item) + 1}\n              </li>\n            );\n          })}\n      </ul>\n      <Modal\n        show={isModalOpen}\n        closed={() => setIsModalOpen(false)}\n        info={selectedCountry}\n      />\n      <Spinner show={isWaiting} />\n    </>\n  );\n}\n\nexport default CountryTable;\n","import axios from \"axios\";\n\naxios.defaults.baseURL = \"https://restcountries.eu/rest/v2\";\naxios.defaults.headers.common[\"Content-Type\"] = \"application/json\";\naxios.defaults.headers.common.Accept = \"application/json\";\n\nexport const Country = {\n  getCountryInfo: (body) => axios.get(\"/all\", body),\n  filterCountryInfo: (params) => axios.get(`/name/${params}`),\n};\n","import { useEffect, useState } from \"react\";\nimport CountryTableLayout from \"../components/CountryTable\";\nimport { Country } from \"../lib/agents\";\n\nfunction CountryTable() {\n  const [isWaiting, setIsWaiting] = useState(false);\n  const [countryInfoList, setCountryInfoList] = useState([]);\n\n  const splitArrayHandler = (data) => {\n    const tempArray = [];\n    for (let i = 0, j = data.length; i < j; i += 25) {\n      const arr = data.slice(i, i + 25);\n      tempArray.push(arr);\n    }\n    setCountryInfoList(tempArray);\n    setIsWaiting(false);\n  };\n\n  const getCountryInfoHandler = async () => {\n    setIsWaiting(true);\n    try {\n      const result = await Country.getCountryInfo();\n      const { data, status } = result;\n      if (status === 200) {\n        const sortedData = data.sort((a, b) => {\n          return a.name.localeCompare(b.name, \"en\");\n        });\n        splitArrayHandler(sortedData);\n      }\n    } catch (error) {\n      console.log(\n        \"[container/CountryTable] getCountryInfoHandler error: \",\n        error\n      );\n      setIsWaiting(false);\n    }\n  };\n\n  const filterCountryHandler = async (text) => {\n    setIsWaiting(true);\n    try {\n      const result = await Country.filterCountryInfo(text);\n      const { data, status } = result;\n      if (status === 200) splitArrayHandler(data);\n    } catch (error) {\n      console.log(\n        \"[container/CountryTable] filterCountryHandler error: \",\n        error\n      );\n      setIsWaiting(false);\n    }\n  };\n\n  useEffect(() => {\n    getCountryInfoHandler();\n  }, []);\n\n  return (\n    <CountryTableLayout\n      isWaiting={isWaiting}\n      setIsWaiting={setIsWaiting}\n      countryInfoList={countryInfoList}\n      setCountryInfoList={setCountryInfoList}\n      getCountryInfoHandler={getCountryInfoHandler}\n      filterCountryHandler={filterCountryHandler}\n    />\n  );\n}\n\nexport default CountryTable;\n","import CountryTable from \"./container/CountryTable\";\nimport \"./App.sass\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Yi-Space Country Service</h1>\n      <CountryTable />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}
{"version":3,"sources":["components/CountryTableRow.js","components/SearchBar.js","components/CountryTable.js","lib/agents.js","container/CountryTable.js","App.js","index.js"],"names":["CountryTableRow","props","flag","name","alpha2Code","alpha3Code","nativeName","altSpellings","callingCodes","className","src","alt","SearchBar","handleSearch","getAll","useState","errorMsg","setErrorMsg","inputRef","useRef","onSubmit","e","preventDefault","value","current","trim","type","placeholder","onFocus","ref","classNames","require","CountryTable","countryInfoList","filterCountryHandler","getCountryInfoHandler","tablePage","setTablePage","sortDirection","setSortDireciton","splitCountryList","setSplitCountryList","useEffect","Array","isArray","sort","a","b","localeCompare","onMouseDown","prevState","icon","faChevronUp","faChevronDown","map","country","index","Object","keys","item","onClick","Number","axios","defaults","baseURL","headers","common","Accept","Country","body","get","params","setCountryInfoList","splitArrayHandler","data","tempArray","i","j","length","arr","slice","push","result","status","console","log","text","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c84a57a0.chunk.js","sourcesContent":["import \"./CountryTableRow.sass\";\nfunction CountryTableRow(props) {\n  const {\n    flag,\n    name,\n    alpha2Code,\n    alpha3Code,\n    nativeName,\n    altSpellings,\n    callingCodes,\n  } = props;\n\n  return (\n    <tr>\n      <td className=\"image-container\">\n        <img src={flag} alt={name} />\n      </td>\n      <td>{name}</td>\n      <td>{alpha2Code}</td>\n      <td>{alpha3Code}</td>\n      <td>{nativeName}</td>\n      <td>{altSpellings}</td>\n      <td>{callingCodes}</td>\n    </tr>\n  );\n}\n\nexport default CountryTableRow;\n","import { useEffect, useRef, useState } from \"react\";\nimport \"./SearchBar.sass\";\n\nfunction SearchBar(props) {\n  const { handleSearch, getAll } = props;\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const inputRef = useRef();\n\n  const _handleSearch = (e) => {\n    e.preventDefault();\n    const value = inputRef.current.value;\n    if (typeof value === \"string\" && value.trim() === \"\") {\n      getAll();\n      return;\n    }\n    handleSearch(value);\n  };\n\n  return (\n    <div className=\"searchbar-style\">\n      <form onSubmit={_handleSearch}>\n        <input\n          type=\"text\"\n          name=\"country\"\n          placeholder=\"Countries...\"\n          onFocus={() => setErrorMsg(\"\")}\n          ref={inputRef}\n        />\n        <button type=\"submit\">搜尋</button>\n        {!!errorMsg && <div className=\"error-txt\">{errorMsg}</div>}\n      </form>\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import { useEffect, useState } from \"react\";\nimport CountryTableRow from \"./CountryTableRow\";\nimport SearchBar from \"./SearchBar\";\nimport \"./CountryTable.sass\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronDown, faChevronUp } from \"@fortawesome/free-solid-svg-icons\";\nconst classNames = require(\"classnames\");\n\nconst ASCENT = 1;\nconst DECENT = 0;\n\nfunction CountryTable(props) {\n  const { countryInfoList, filterCountryHandler, getCountryInfoHandler } =\n    props;\n  const [tablePage, setTablePage] = useState(0);\n  const [sortDirection, setSortDireciton] = useState(DECENT);\n  const [splitCountryList, setSplitCountryList] = useState(null);\n\n  const sortCountryHandler = () => {\n    splitCountryList.sort((a, b) => {\n      if (sortDirection) return a.name.localeCompare(b.name, \"en\");\n      return b.name.localeCompare(a.name, \"en\");\n    });\n    setSplitCountryList(splitCountryList);\n  };\n\n  useEffect(() => {\n    if (!Array.isArray(countryInfoList)) return;\n    setSplitCountryList(countryInfoList[tablePage]);\n  }, [countryInfoList, tablePage]);\n\n  useEffect(() => {\n    if (!Array.isArray(splitCountryList)) return;\n    sortCountryHandler();\n  }, [sortDirection, splitCountryList]);\n\n  return (\n    <>\n      <SearchBar\n        handleSearch={filterCountryHandler}\n        getAll={getCountryInfoHandler}\n      />\n      <table className=\"table-style\">\n        <thead>\n          <tr>\n            <th>國旗</th>\n            <th\n              onMouseDown={() =>\n                setSortDireciton((prevState) =>\n                  prevState === DECENT ? ASCENT : DECENT\n                )\n              }\n              className=\"clickable\"\n            >\n              國家名稱\n              {sortDirection === ASCENT ? (\n                <FontAwesomeIcon icon={faChevronUp} />\n              ) : (\n                <FontAwesomeIcon icon={faChevronDown} />\n              )}\n            </th>\n            <th>2位國家代碼</th>\n            <th>3位國家代碼</th>\n            <th>母語名稱</th>\n            <th>替代國家名稱</th>\n            <th>國際電話區號</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Array.isArray(splitCountryList) &&\n            splitCountryList.map((country, index) => {\n              return (\n                <CountryTableRow\n                  key={`${country.flag}-${index}`}\n                  flag={country.flag}\n                  name={country.name}\n                  alpha2Code={country.alpha2Code}\n                  alpha3Code={country.alpha3Code}\n                  nativeName={country.nativeName}\n                  altSpellings={country.altSpellings}\n                  callingCodes={country.callingCodes}\n                />\n              );\n            })}\n        </tbody>\n      </table>\n      <ul className=\"pages\">\n        {Array.isArray(countryInfoList) &&\n          Object.keys(countryInfoList)?.map((item) => {\n            return (\n              <li\n                onClick={() => setTablePage(Number(item))}\n                className={classNames(tablePage === Number(item) && \"selected\")}\n              >\n                {Number(item) + 1}\n              </li>\n            );\n          })}\n      </ul>\n    </>\n  );\n}\n\nexport default CountryTable;\n","import axios from \"axios\";\n\naxios.defaults.baseURL = \"https://restcountries.eu/rest/v2\";\naxios.defaults.headers.common[\"Content-Type\"] = \"application/json\";\naxios.defaults.headers.common.Accept = \"application/json\";\n\nexport const Country = {\n  getCountryInfo: (body) => axios.get(\"/all\", body),\n  filterCountryInfo: (params) => axios.get(`/name/${params}`),\n};\n","import { useEffect, useState } from \"react\";\nimport CountryTableLayout from \"../components/CountryTable\";\nimport { Country } from \"../lib/agents\";\n\nfunction CountryTable() {\n  const [countryInfoList, setCountryInfoList] = useState([]);\n\n  const splitArrayHandler = (data) => {\n    const tempArray = [];\n    for (let i = 0, j = data.length; i < j; i += 25) {\n      const arr = data.slice(i, i + 25);\n      tempArray.push(arr);\n    }\n    setCountryInfoList(tempArray);\n  };\n\n  const getCountryInfoHandler = async () => {\n    try {\n      const result = await Country.getCountryInfo();\n      const { data, status } = result;\n      if (status === 200) splitArrayHandler(data);\n    } catch (error) {\n      console.log(\n        \"[container/CountryTable] getCountryInfoHandler error: \",\n        error\n      );\n    }\n  };\n\n  const filterCountryHandler = async (text) => {\n    try {\n      const result = await Country.filterCountryInfo(text);\n      const { data, status } = result;\n      if (status === 200) splitArrayHandler(data);\n    } catch (error) {\n      console.log(\n        \"[container/CountryTable] filterCountryHandler error: \",\n        error\n      );\n    }\n  };\n\n  useEffect(() => {\n    getCountryInfoHandler();\n  }, []);\n\n  return (\n    <CountryTableLayout\n      countryInfoList={countryInfoList}\n      setCountryInfoList={setCountryInfoList}\n      getCountryInfoHandler={getCountryInfoHandler}\n      filterCountryHandler={filterCountryHandler}\n    />\n  );\n}\n\nexport default CountryTable;\n","import CountryTable from \"./container/CountryTable\";\nimport \"./App.sass\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Yi-Space Country Service</h1>\n      <CountryTable />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}